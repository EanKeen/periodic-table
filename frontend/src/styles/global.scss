// // V A R I A B L E S \\ \\
* {
  box-sizing: border-box;
}

// Open Color Variables
// @import "open-color/open-color.scss";

// Import mixins and functions, which are only included if the mixin or function is called via @include
// @import "mixins.scss";
// @import "functions.scss";

// Other common variables
$minimum-width: 1000px;
$maximum-width: 1000px;
$border-radius: 8px;
$border-radius-small: 4px;
$transition-time: 0.15s; // Remove $transition-time in favor of $transition-duration eventually
$transition-duration: 0.15s;
$transition-timing-fn: ease-in-out;

// Variables for Navigation / Layouts
$small-laptop-width: 1200px;
$tablet-width: 1100px;
$mobile-width: 940px;
$tiny-mobile-width: 350px;

// Variables for Aesthetics

// The main margins on the left and right side of the page
$body-margin: 8px;

// Spacing (there are some local spacing variables for each component that may be based from this global component)
$spacing: 8px;

// MASTER COLOR VARIABLE LIST
//  [Theme Name]          [JS Theme Name]   [CSS Theme Abbreviation]
//  Light Theme           light-def         ld
//  High Contrast Theme   light-con         lc
//  Dark Theme            dark-def          dd

// GENERAL DESCRIPTIONS (create aa-variables just for better readability of master variables, don't actually use them)
// Defines the background of any component directly on the DOM (like periodic table, nav, element information, etc)
$zz-background: $oc-gray-0;

// Defines the shadow of any component directly on the DOM (like periodic table, navBar, element information, etc)
$zz-shadow: $oc-gray-2;

// Defines the shadow during mouse hover of component, as described above
$zz-shadow-hover: $oc-gray-3;

// LIGHT THEME (LF)
$ld-background: $oc-gray-0;
$ld-background-accent: $oc-gray-1;
$ld-shadow: $oc-gray-2;
$ld-shadow-hover: $oc-gray-3;

$ld-text: $oc-gray-9;

// HIGH CONTRAST THEME (LC)
$lc-background: $oc-gray-1;
$lc-background-accent: $oc-gray-2;
$lc-shadow: $oc-gray-3;
$lc-shadow-hover: $oc-gray-4;

$lc-text: $oc-gray-9;

// DARK THEME (DD)
$dd-background: $oc-gray-8;
$dd-background-accent: $oc-gray-9;
$dd-shadow: $oc-gray-7;
$dd-shadow-hover: $oc-gray-6;

$dd-text: $oc-gray-0;





// // M I X I N S \\ \\
// Shadow
// @param 1  $element  The element to be styled to have a shadow
// @param 2  $hasShadow  Boolean determining if there is a shadow. If no shadow, then no styles for shadow are created
// @param 3  $shadow  Regular shadow of the element
// @param 4  $shadowHover  Shadow of the element on hover
// Purpose: To create a shadow of an element, that is darkened further on hover
@mixin shadow($element, $hasShadow, $shadow, $shadowHover) {
  @if ($hasShadow) {
    #{$element} {
      box-shadow: 2px 2px 3px $shadow;
    }

    #{$element}:hover {
      box-shadow: 2px 2px 4px $shadowHover;
    }
  }
}






// // T R A N S I T I O N S \\ \\ 
// createTransitions
// @param 1  $transitionProperties   List of all the transitions to use. All of these transitions will have the same transition duration and timing function
// @param 2  $isExtraTransitions  Boolean for if there is extra transitions after using the function. In other words, this is true if you are adding more transitions, either manually or with the transition function after using the transition function
// @param 3  $transitionDuration  Specify the duration of the transition. Default is $transition-duration
// @param 4  $transitionTimingFunction  Specify the function of how the transition timing behaves. Default is $transition-timing-fn
// Purpose: To create a function that can add transitions to the CSS property. The only mandatory parameter to pass are the proeprties to transitions, the rest will defualt
@function createTransitions(
  $transitionProperties,
  $isExtraTransitions: false,
  $transitionDuration: $transition-duration,
  $transitionTimingFunction: $transition-timing-fn
) {
  $returnThis: "";
  @each $transitionProperty in $transitionProperties {
    $returnThis: $returnThis +
      (
        $transitionProperty +
          " " +
          $transitionDuration +
          " " +
          $transitionTimingFunction
      );

    // Make sure you don't put a comma and space at the end if it is the last element, OR, if there will be more transitions after
    @if (
      (
          index($transitionProperties, $transitionProperty) !=
            length($transitionProperties)
        ) or
        $isExtraTransitions
    ) {
      $returnThis: ($returnThis + ", ");
    }
  }

  @return unquote($returnThis);
}

