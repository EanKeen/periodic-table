// Add 5 to rows for the "f" block elements
$total-columns: (18 * 2);
$total-rows: (7 * 2) + 5;

// The width and height of each element in the periodic table
$element-width: 100% / $total-columns;
$element-height: 40px;

// MAIN GRID STRUCTURE
#pt {
  display: flex;
  flex-direction: column;
  justify-content: center;
  min-width: 400px;
}

#grid-container {
  display: inline-flex;
  justify-content: center;
}

#grid {
  display: grid;
  grid-template-columns: 40px repeat($total-columns, 1fr);
  grid-template-rows: 40px repeat($total-rows, $element-height);
  padding: 10px 10px 10px 10px;
}


// DUPLICATED ELEMENTS FROM PERIODIC TABLE
.element-outer {
  border-radius: 4px;
  margin: 2px 2px 2px 2px;
  //transition: background-color $transition-time ease-in-out;
  overflow: hidden;
  user-select: none;
}

// Recall background-color found in generic-elements.scss
.element-outer:hover {
  //transition: background-color $transition-time ease-in-out;
  cursor: pointer;
}

.element-inner {
  justify-self: center; //Center horizontally
  margin: 2px 2px 2px 4px;
}

// Text inside of DUPLICATED ELEMENTS
.element-primary-info {
  font-family: latobold;
  font-weight: regular;
  font-size: 1.4em;
}

.element-secondary-info {
  font-family: latoregular;
  font-weight: regular;
  font-size: 0.8em;
}

// ELEMENT DESCRIPTIONS AND ELEMENT OVERVIEW PANNEL
#element-overview, #element-desc {
  transition: background-color $transition-time ease-in-out;
}

// ELEMENT OVERVIEW PANNEL
#element-overview {
  border-radius: $border-radius;
  overflow: hidden;
  grid-column-start: 7;
  grid-column-end: 14;
  grid-row-start: 2;
  grid-row-end: 7;
  //transition: box-shadow $transition-time ease-in-out;
  z-index: 1;

  // Sets how wide the inner element should be, relative to the element outside of it
  // Sets the margin to 100% - lenth you want element, then / 2 since there are left and right margins
  $element-view-inner-width: 85%;
  $element-view-margin: (100% - $element-view-inner-width) / 2;

  #element-overview-inner {
    justify-self: center;
    width: $element-view-inner-width;
    margin: $element-view-margin $element-view-margin $element-view-margin $element-view-margin;
    //transition: box-shadow $transition-time ease-in-out;
  }

  // Text inside of ELEMENT OVERVIEW
  .element-ov-primary-info {
    font-family: latobold;
    font-weight: regular;
    font-size: 2.5em;
  }

  .element-ov-secondary-info {
    font-family: latoregular;
    font-weight: regular;
    font-size: 1.75em;
  }

}


// ELEMENT DESCRIPTIONS
#element-desc {
  border-radius: $border-radius;
  grid-column-start: 15;
  grid-column-end: 25;
  grid-row-start: 2;
  grid-row-end: 7;
  //z-index: 1;
}

// This sets how wide the inner element should be, relative to the element outside of it
// Then, it sets the margin to 100% - lenth you want element, then / 2 since there are left and right margins
$element-view-inner-width: 95%;
$element-view-margin: (100% - $element-view-inner-width) / 2;

#element-desc-inner {
  justify-self: center;
  width: $element-view-inner-width;
  margin: $element-view-margin $element-view-margin $element-view-margin $element-view-margin;
  //transition: box-shadow $transition-time ease-in-out;
}

// Text inside ELEMENT DESCRIPTIONS
.element-d-primary-info {
  font-family: latoregular;
  font-weight: regular;
  font-size: 1.7em;
  margin-bottom: 5px;
  overflow: hidden;
}

.element-d-secondary-info {
  font-family: latolight;
  font-weight: regular;
  font-size: 1.15em;
  margin-bottom: 15px;
}

// UNOBTRUSIVE INFORMATION (DETAILS)
#det {
  display: grid;
  grid-template-columns: auto 1fr;
  list-style-type: none;
  height: 20vw;
  max-height: 25vh;
}

#det > li {
  border-radius: $border-radius;
}

#det #unobtrusive-overview {
  margin: 7px 7px 7px 7px;
  width: 20vw;
  max-width: 25vh;
}

#det #unobtrusive-overview-inner {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  //margin: 10px 10px 10px 10px 0
  height: 100%;
  width: 100%;
  border-radius: $border-radius;
}

#det #element-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 65%;
  width: 65%;
  border-radius: $border-radius;
  font-family: robotomedium;
  font-weight: regular;
  font-size: 3.25em;
  transition: background-color $transition-time ease-in-out;
}

#det #element-name {
  font-size: 1.85em;
}


#det #unobtrusive-overview-inner h3 {
  font-family: robotolight;
  font-weight: regular;
  font-size: 2em;
}

#det #unobtrusive-desc {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-column-gap: 15px;
  height: 100%;
  width: 100%;
  margin: 7px 7px 7px 7px;
  overflow: hidden;
}

// Left and right elements
#det #unobtrusive-desc ul {

}

// Each statistic box thing
#det #unobtrusive-desc ul li {
  display: flex;
  align-items: center;
  list-style: none;
  margin-bottom: 10px;
  padding-left: 7px;
  border-radius: $border-radius / 2;
}

#det #unobtrusive-desc li p {
  font-family: robotolight;
  font-weight: regular;
  font-size: 1em;
}

#det #unobtrusive-desc li h4 {
  font-family: robotolight;
  font-weight: regular;
  font-size: 1.2em;
  margin-right: 10px;
}

#det #element-icon:hover {
  border-radius: $border-radius * 1.75;
  transition: border-radius 0.2s ease-in-out;
  cursor: pointer;
}


#det .element-det-primary-info {
  overflow: visible;
  font-family: latobold;
  font-weight: regular;
  font-size: 1.7em;
}

#det .element-det-secondary-info {
  overflow: visible;
  font-family: latolight;
  font-weight: regular;
  font-size: 1.15em;
}




// PERIOD LABELS
.label-period-inner {
  height: 100%;
  width: 75%;
  //transition: background-color $transition-time ease-in-out;
  border-radius: $border-radius;
  user-select: none;
}

.label-period-inner:hover {
  //transition: background-color $transition-time ease-in-out;
  cursor: pointer;
}

.label-period-inner > .label-text {
  text-align: center;
  padding-top: 50%;
  transform: translateY(40%);
  font-size: 1.33em;
}


// GROUP LABELS
.label-group-inner {
  height: 70%;
  width: 100%;
  //transition: background-color $transition-time ease-in-out;
  border-radius: $border-radius;
  user-select: none;
}

.label-group-inner:hover {
  //transition: background-color $transition-time ease-in-out;
  cursor: pointer;
}

.label-group-inner > .label-text {
  padding-top: 2px;
  text-align: center;
  font-size: 1.33em;
}

// DUPLICATED ELEMENTS FROM PERIODIC TABLE CSS TAGS FOR POSITION IN TABLE
//SCSS for loop from 1 to the total number of periods in the periodic table (rows)
@for $i from 2 through $total-rows {
  // For each DOM element with the p-$i class, place it starting at a certain row,
  // and end it before the very next row
  // Note, all p-$i classes are div elements
  // Note, p-$i classes were created using v-bind, in a for loop for each element
  // Note, p-$i stands for the ith period, or the nth period in which the elment is located on the periodic table
  .r-#{$i} {
    grid-row-start: #{$i};
    grid-row-end: #{$i + 2};
  }
}

//SCSS for loop from 1 to the total number of groups in the periodic table (columns)
// Each element is on a 2 by 2 grid, which is why $i * 2.(Want it to start every two columns/rows)
// ($i * 2) - 1 because for loop starts at 1, and 1 * 2 is 2, but CSS grids start at 1
// ($i * 2) + 1 because the difference between grid-column-start and grid-column-end must be 2
@for $i from 1 through $total-columns {
  // For each DOM element with the g-$i class, place it starting at a certain column,
  // and end it before the very next column
  // Note, all g-$i classes are div elements
  // Note, g-$i classes were created using v-bind, in a for loop for each element
  // Note, g-$i stands for the ith group, or the nth group in which the elment is located on the periodic table
  .c-#{$i} {
    grid-column-start: #{$i};
    grid-column-end: #{$i + 2};
  }
}


// PERIOD LABELS AND GROUP LABELS CSS TAGS FOR POSITION IN TABLE
//Row labels. On left side, these are one column wide rather than 2
@for $i from 2 through $total-rows {
 .rr-#{$i} {
   grid-row-start: #{$i};
   grid-row-end: #{$i + 2};
 }
}

// Column labels. On top side, these are still 2 rows wide
@for $i from 2 through $total-columns {
 .cc-#{$i} {
   grid-column-start: #{$i};
   grid-column-end: #{$i + 2};
 }
}

// TRANSITION OF TEXT
.atomicMass { // I don't think this actually works
  position: relative;
  bottom: -3px;
}

.atomicNumber, .abbreviation, .name, .atomicMass {
  transition: color $transition-time ease-in-out;
}
