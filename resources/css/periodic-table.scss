//main: ./main.scss

// Add 5 to rows for the "f" block elements
$total-columns: (18 * 2);
$total-rows: (7 * 2) + 5;

// The width and height of each element in the periodic table
$element-width: 100% / $total-columns;
$element-height: 40px;

#grid-container-outer {
  display: flex;
  justify-content: center;
  min-width: 400px;
}

// Div outisde of the grid
#grid-container {
  display: inline-flex;
  justify-content: center;
  background-color: $oc-gray-1;
  margin-top: 20px;
  min-width: 400px;

}

#grid {
  display: grid;
  grid-template-columns: 40px repeat($total-columns, 1fr);
  grid-template-rows: 40px repeat($total-rows, $element-height);
  padding: 10px 10px 10px 10px;
}

// ELEMENTS
.element-outer {
  border-radius: 5px;
  margin: 2px 2px 2px 2px;
  box-shadow: 3px 3px 3px $oc-gray-3;
  transition: background-color $transition-time ease-in-out;
  overflow: hidden;
  user-select: none;
}

// Recall background-color found in generic-elements.scss
.element-outer:hover {
  box-shadow: 5px 5px 5px $oc-gray-3;
  transition: background-color $transition-time ease-in-out;
  cursor: pointer;
}

.element-inner {
  justify-self: center; //Center horizontally
  margin: 2px 2px 2px 4px;
}

// Large element with larger information about each element
#element-overview {
  box-shadow: 4px 4px 4px $oc-gray-2;
  border-radius: $border-radius / 2;
  overflow: hidden;
  grid-column-start: 7;
  grid-column-end: 14;
  grid-row-start: 2;
  grid-row-end: 7;
  transition: box-shadow $transition-time ease-in-out;
  z-index: 1;

}

// Sets how wide the inner element should be, relative to the element outside of it
// Sets the margin to 100% - lenth you want element, then / 2 since there are left and right margins
$element-view-inner-width: 85%;
$element-view-margin: (100% - $element-view-inner-width) / 2;

#element-overview-inner {
  justify-self: center;
  width: $element-view-inner-width;
  margin: $element-view-margin $element-view-margin $element-view-margin $element-view-margin;
  transition: box-shadow $transition-time ease-in-out;
}

// Description with more info of the element (right of #element-overview)
#element-desc {
  box-shadow: 4px 4px 4px $oc-gray-2;
  border-radius: $border-radius / 2;
  grid-column-start: 15;
  grid-column-end: 25;
  grid-row-start: 2;
  grid-row-end: 7;
  //z-index: 1;
}

// This sets how wide the inner element should be, relative to the element outside of it
// Then, it sets the margin to 100% - lenth you want element, then / 2 since there are left and right margins
$element-view-inner-width: 95%;
$element-view-margin: (100% - $element-view-inner-width) / 2;

#element-desc-inner {
  justify-self: center;
  width: $element-view-inner-width;
  margin: $element-view-margin $element-view-margin $element-view-margin $element-view-margin;
  transition: box-shadow $transition-time ease-in-out;
}

#element-desc-inner > h5 {
  font-family: latolight;
  font-size: 1.7em;
  margin-bottom: 5px;
  overflow: hidden;
}

#element-desc-inner > p {
  font-family: latolight;
  font-size: 1.15em;
  margin-bottom: 15px;
}

// Color transitions on hover of element-overview and element-desc
#element-overview, #element-desc {
  transition: background-color $transition-time ease-in-out;
}

// ROW AND COLUMN LABELS
.label-period-outer, .label-group-outer {
  z-index: 0;
  user-select: none;
}

// PERIOD
.label-period-inner {
  height: 100%;
  width: 75%;
  border-radius: $border-radius / 2;
  transition: background-color $transition-time ease-in-out;
}

.label-period-inner:hover {
  background-color: $oc-gray-3;
  transition: background-color $transition-time ease-in-out;
  cursor: pointer;
}

.label-period-inner > .label-text {
  text-align: center;
  padding-top: 50%;
  transform: translateY(40%);
  font-size: 1.33em;
}

// GROUP
.label-group-inner {
  height: 70%;
  width: 100%;
  //margin-left: 50%;
  //transform: translateX(-50%);
  //padding-left: 7px;
  //padding-right: 7px;
  //padding-top: 5px;
  border-radius: $border-radius / 2;
  transition: background-color $transition-time ease-in-out;
}

.label-group-inner:hover {
  background-color: $oc-gray-3;
  transition: background-color $transition-time ease-in-out;
  cursor: pointer;
}

.label-group-inner > .label-text {
  padding-top: 2px;
  text-align: center;
  font-size: 1.33em;
}

// ELEMENTS
//SCSS for loop from 1 to the total number of groups in the periodic table (columns)
// Each element is on a 2 by 2 grid, which is why $i * 2.(Want it to start every two columns/rows)
// ($i * 2) - 1 because for loop starts at 1, and 1 * 2 is 2, but CSS grids start at 1
// ($i * 2) + 1 because the difference between grid-column-start and grid-column-end must be 2
@for $i from 1 through $total-columns {
  // For each DOM element with the g-$i class, place it starting at a certain column,
  // and end it before the very next column
  // Note, all g-$i classes are div elements
  // Note, g-$i classes were created using v-bind, in a for loop for each element
  // Note, g-$i stands for the ith group, or the nth group in which the elment is located on the periodic table
  .c-#{$i} {
    grid-column-start: #{$i};
    grid-column-end: #{$i + 2};
  }
}

//SCSS for loop from 1 to the total number of periods in the periodic table (rows)
@for $i from 2 through $total-rows {
  // For each DOM element with the p-$i class, place it starting at a certain row,
  // and end it before the very next row
  // Note, all p-$i classes are div elements
  // Note, p-$i classes were created using v-bind, in a for loop for each element
  // Note, p-$i stands for the ith period, or the nth period in which the elment is located on the periodic table
  .r-#{$i} {
    grid-row-start: #{$i};
    grid-row-end: #{$i + 2};
  }
}

// COLUMN AND ROW LABELS
//Row labels. On left side, these are one column wide rather than 2
@for $i from 2 through $total-rows {
 .rr-#{$i} {
   grid-row-start: #{$i};
   grid-row-end: #{$i + 2};
 }
}

// Column labels. On top side, these are still 2 rows wide
@for $i from 2 through $total-columns {
 .cc-#{$i} {
   grid-column-start: #{$i};
   grid-column-end: #{$i + 2};
 }
}
